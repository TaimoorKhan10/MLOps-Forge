version: '3.8'

services:
  # ML API Service
  api:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile
    command: mlops-forge-serve --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - ../../data:/app/data
      - ../../models:/app/models
      - ../../logs:/app/logs
    environment:
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/models/random_forest_model.joblib
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MLflow Server
  mlflow:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db --default-artifact-root /app/mlruns
    ports:
      - "5000:5000"
    volumes:
      - ../../mlruns:/app/mlruns
      - ../../mlflow.db:/app/mlflow.db
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/2.0/mlflow/experiments/list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.44.0
    ports:
      - "9090:9090"
    volumes:
      - ../../infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    volumes:
      - ../../infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Model Monitoring Service
  monitoring:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile
    command: mlops-monitor start-prometheus --port 8001
    ports:
      - "8001:8001"
    volumes:
      - ../../data:/app/data
      - ../../models:/app/models
      - ../../logs:/app/logs
    depends_on:
      - api
      - prometheus
    networks:
      - mlops-network
    restart: unless-stopped

volumes:
  prometheus-data:
  grafana-data:

networks:
  mlops-network:
    driver: bridge
